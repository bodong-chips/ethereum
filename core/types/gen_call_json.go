// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*callMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c Call) MarshalJSON() ([]byte, error) {
	type Call struct {
		Type        hexutil.Uint64 `json:"type" gencodec:"required"`
		From        common.Address `json:"from" gencodec:"required"`
		To          common.Address `json:"to" gencodec:"required"`
		Gas         hexutil.Uint64 `json:"gas" gencodec:"required"`
		Value       *hexutil.Big   `json:"value" gencodec:"required"`
		Data        hexutil.Bytes  `json:"data" gencodec:"required"`
		Success     bool           `json:"success" gencodec:"required"`
		BlockNumber hexutil.Uint64 `json:"blockNumber"`
		TxHash      common.Hash    `json:"transactionHash" gencodec:"required"`
		TxIndex     hexutil.Uint   `json:"transactionIndex"`
		BlockHash   common.Hash    `json:"blockHash"`
		Index       hexutil.Uint   `json:"callIndex"`
		Removed     bool           `json:"removed"`
	}
	var enc Call
	enc.Type = hexutil.Uint64(c.Type)
	enc.From = c.From
	enc.To = c.To
	enc.Gas = hexutil.Uint64(c.Gas)
	enc.Value = (*hexutil.Big)(c.Value)
	enc.Data = c.Data
	enc.Success = c.Success
	enc.BlockNumber = hexutil.Uint64(c.BlockNumber)
	enc.TxHash = c.TxHash
	enc.TxIndex = hexutil.Uint(c.TxIndex)
	enc.BlockHash = c.BlockHash
	enc.Index = hexutil.Uint(c.Index)
	enc.Removed = c.Removed
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *Call) UnmarshalJSON(input []byte) error {
	type Call struct {
		Type        *hexutil.Uint64 `json:"type" gencodec:"required"`
		From        *common.Address `json:"from" gencodec:"required"`
		To          *common.Address `json:"to" gencodec:"required"`
		Gas         *hexutil.Uint64 `json:"gas" gencodec:"required"`
		Value       *hexutil.Big    `json:"value" gencodec:"required"`
		Data        *hexutil.Bytes  `json:"data" gencodec:"required"`
		Success     *bool           `json:"success" gencodec:"required"`
		BlockNumber *hexutil.Uint64 `json:"blockNumber"`
		TxHash      *common.Hash    `json:"transactionHash" gencodec:"required"`
		TxIndex     *hexutil.Uint   `json:"transactionIndex"`
		BlockHash   *common.Hash    `json:"blockHash"`
		Index       *hexutil.Uint   `json:"callIndex"`
		Removed     *bool           `json:"removed"`
	}
	var dec Call
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Type == nil {
		return errors.New("missing required field 'type' for Call")
	}
	c.Type = CallType(*dec.Type)
	if dec.From == nil {
		return errors.New("missing required field 'from' for Call")
	}
	c.From = *dec.From
	if dec.To == nil {
		return errors.New("missing required field 'to' for Call")
	}
	c.To = *dec.To
	if dec.Gas == nil {
		return errors.New("missing required field 'gas' for Call")
	}
	c.Gas = uint64(*dec.Gas)
	if dec.Value == nil {
		return errors.New("missing required field 'value' for Call")
	}
	c.Value = (*big.Int)(dec.Value)
	if dec.Data == nil {
		return errors.New("missing required field 'data' for Call")
	}
	c.Data = *dec.Data
	if dec.Success == nil {
		return errors.New("missing required field 'success' for Call")
	}
	c.Success = *dec.Success
	if dec.BlockNumber != nil {
		c.BlockNumber = uint64(*dec.BlockNumber)
	}
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Call")
	}
	c.TxHash = *dec.TxHash
	if dec.TxIndex != nil {
		c.TxIndex = uint(*dec.TxIndex)
	}
	if dec.BlockHash != nil {
		c.BlockHash = *dec.BlockHash
	}
	if dec.Index != nil {
		c.Index = uint(*dec.Index)
	}
	if dec.Removed != nil {
		c.Removed = *dec.Removed
	}
	return nil
}
